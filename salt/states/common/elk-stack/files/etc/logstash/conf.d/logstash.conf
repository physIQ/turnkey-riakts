input {
  redis {
    host => "localhost"
    data_type => "list"
    key => "logstash:beaver"
  }
}

filter {

  ###################################
  # application specific filter
  #
  if [type] == "application" {

    if "rest-api-framework" in [source] {
       grok {
         patterns_dir => ["/etc/logstash/patterns"]
         match => [ "message", "%{RESTAPIFRAMEWORKLOG}" ]
         overwrite => [ "message" ]
         add_tag => ["grokked"]
       }

       date {
         match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
         timezone => "UTC"
         add_tag => ["dated"]
         remove_field => ["timestamp"]
       }
    }

    date {
      match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss.SSSSSS", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
      timezone => "UTC"
      add_tag => ["dated"]
      remove_field => ["timestamp"]
    }
  }
  else if [type] == "service" {

    if "supervisord" in [source] {
       grok {
         patterns_dir => ["/etc/logstash/patterns"]
         match => [ "message", "%{SUPERVISORDLOG}" ]
         overwrite => [ "message" ]
         add_tag => ["grokked"]
       }

       date {
         match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
         timezone => "UTC"
         add_tag => ["dated"]
         remove_field => ["timestamp"]
       }
    }
    else if "postgres" in [source] {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => [ "message", "%{POSTGRESQL}" ]
        overwrite => [ "message" ]
        add_tag => ["grokked"]
      }

      if [message] =~ /^[\[].*/ {
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => [ "message", "%{POSTGRESQLSESSION}" ]
          overwrite => [ "message" ]
          add_tag => ["grokked-2"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => [ "message", "%{POSTGRESQLNOSESSION}" ]
          overwrite => [ "message" ]
          add_tag => ["grokked-2"]
        }
      }

      date {
        match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
        timezone => "UTC"
        add_tag => ["dated"]
        remove_field => ["timestamp"]
        remove_field => ["timezone"]
      }
    }
    else if "redis" in [source] {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => [ "message", "%{REDISLOG}" ]
        overwrite => [ "message" ]
        add_tag => ["grokked"]
      }

      if [message] =~ /^[A-Z][A-Z][A-Z][A-Z].*/ {
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => [ "message", "%{REDISLOGWLEVEL}" ]
          overwrite => [ "message" ]
          add_tag => ["grokked-2"]
        }
      }

      date {
        match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
        timezone => "UTC"
        add_tag => ["dated"]
        remove_field => ["timestamp"]
      }
    }
    else if "nginx" in [source] {
      mutate {
        convert => {
          "request.size" => "integer"
          "response.size" => "integer"
          "response.time" => "float"
          "response.status" => "integer"
        }
        gsub => ["timestamp", "\.",""]
      }
      date {
        match => ["timestamp", "UNIX_MS"]
        timezone => "UTC"
        add_tag => ["dated"]
        remove_field => ["timestamp"]
      }
    }
    else if "nginx-error" in [source] {
      grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => ["message", "%{NGINXERRORLOG}"]
          overwrite => [ "message" ]
          add_tag => ["grokked"]
          remove_field => ["timestamp"]
      }
    }
    else if "elasticsearch" in [source] {
      grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => ["message", "%{ELASTICSEARCHLOG}"]
          overwrite => [ "message" ]
          add_tag => ["grokked"]
      }

      if  [identifier] == "index.search.slowlog.fetch" or  [identifier] == "index.search.slowlog.query" {
          grok {
              patterns_dir => ["/etc/logstash/patterns"]
              match => ["message", "%{ELASTICSEARCHSLOWQUERYLOG}"]
              add_tag => ["grokked2"]
          }
          mutate {
              remove_field => [ "message" ]
              gsub => [
                "source_body", "\], extra_source\[$", ""
              ]
          }
      } else if [identifier] == "index.indexing.slowlog.index" {
          grok {
              patterns_dir => ["/etc/logstash/patterns"]
              match => ["message", "%{ELASTICSEARCHSLOWINDEXLOG}"]
              add_tag => ["grokked3"]
          }
          mutate {
              remove_field => [ "message" ]
          }
      }
      date {
          match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
          timezone => "UTC"
          add_tag => ["dated"]
          remove_field => ["timestamp"]
      }
      mutate {
        convert => {
          "took_millis" => "integer"
          "total_shards" => "integer"
          "shard" => "integer"
        }
      }
    }
  }
  else if [type] == "state" {
    if 'salt' in [source] {

        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => ["message", "%{SALTLOG}"]
          overwrite => [ "message" ]
          add_tag => ["grokked"]
        }
        date {
          match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
          timezone => "UTC"
          add_tag => ["dated"]
          remove_field => ["timestamp"]
        }
    }

  }

}

output {
  elasticsearch { }
}
